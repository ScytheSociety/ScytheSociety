/**
 * Hell Shooter - Boss Comments System
 * Sistema modular de comentarios √©picos y sombr√≠os del boss
 */

const BossComments = {
  // ======================================================
  // ESTADO DEL SISTEMA DE COMENTARIOS
  // ======================================================

  bossManager: null,

  // Control de timing
  lastCommentTime: 0,
  commentCooldowns: {
    entrada: 300, // 5 segundos
    combate: 180, // 3 segundos
    derrota_boss: 0, // Sin cooldown para derrota
    fase: 120, // 2 segundos
    dano: 60, // 1 segundo
  },

  // Estado de comentarios
  activeComments: [],
  maxActiveComments: 3,

  // Configuraci√≥n visual
  commentConfig: {
    duration: 4000, // 4 segundos por defecto
    fadeDuration: 500, // 0.5 segundos de fade
    maxWidth: "300px",
    fontSize: "14px",
    position: "above_boss", // above_boss, screen_top, floating
  },

  // ======================================================
  // BASE DE DATOS DE COMENTARIOS √âPICOS
  // ======================================================

  commentDatabase: {
    entrada: [
      "¬°Scythe Society ser√° destruida para siempre!",
      "¬°Vengo por la reina Hell y toda su legi√≥n!",
      "¬°Prep√°rense para la aniquilaci√≥n total!",
      "¬°Su clan pat√©tico no durar√° ni un minuto!",
      "¬°Hell pagar√° por su insolencia con sangre!",
      "¬°Soy la pesadilla que acecha sus sue√±os!",
      "¬°El reino de las sombras me pertenece!",
      "¬°Desde las profundidades del abismo vengo!",
      "¬°Hell conocer√° el verdadero terror!",
      "¬°Scythe Society... su final ha llegado!",
    ],

    combate: [
      "¬°Son unos mancos pat√©ticos!",
      "¬°Scythe Society, m√°s como Scythe Pathetic!",
      "¬°Hell deber√≠a entrenar mejor a sus lacayos!",
      "¬°Qu√© decepcionante resistencia ofrecen!",
      "¬°Ni siquiera saben apuntar correctamente!",
      "¬°Mi abuela muerta disparaba mejor!",
      "¬°Scythe Society = Scythe Sorry!",
      "¬°Hell te abandonar√° como a todos!",
      "¬°Toda la culpa es de Red por ser tan d√©bil!",
      "¬°Eso es demasiado heterosexual de tu parte!",
      "¬°Sus balas son como cosquillas de beb√©!",
      "¬°Pat√©ticos mortales sin esperanza!",
      "¬°Esto es todo lo que tienen?! ¬°Ja!",
      "¬°Hell eligi√≥ mal a sus campeones!",
      "¬°Ni sus ancestros podr√°n salvarlos!",
      "¬°Scythe Society, m√°s como Cry Society!",
      "¬°Deber√≠an rendirse ahora y suplicar!",
      "¬°Soy la oscuridad que devora la luz!",
      "¬°Sus almas me pertenecen ahora!",
      "¬°El terror apenas ha comenzado!",
      "¬°Pronto conocer√°n el verdadero miedo!",
      "¬°Su sangre manchar√° estas tierras!",
      "¬°La muerte ser√° su √∫nico escape!",
      "¬°Hell no podr√° protegerlos por siempre!",
      "¬°Soy el eco de sus peores pesadillas!",
      "¬°Cada disparo los acerca m√°s a la tumba!",
      "¬°Hell deber√≠a estar avergonzada de ustedes!",
      "¬°Red es un comandante incompetente!",
      "¬°Scythe Society? ¬°M√°s bien Scythe Tragedy!",
    ],

    victoria_boss: [
      "¬°Hell, aqu√≠ voy por ti, mi amor perdido!",
      "¬°Scythe Society ha ca√≠do en las tinieblas!",
      "¬°Vuelvan pronto... si es que pueden regenerarse!",
      "¬°Digan adi√≥s a su preciada Hell para siempre!",
      "¬°La oscuridad prevalece sobre la luz!",
      "¬°Sus almas ahora me pertenecen!",
      "¬°El reino de Hell ser√° m√≠o!",
      "¬°Hell pagar√° por haberme traicionado!",
      "¬°Scythe Society no era rival para m√≠!",
      "¬°Pronto toda la galaxia ser√° oscuridad!",
    ],

    derrota_boss: [
      "¬°Esto no ha terminado, volver√©!",
      "¬°Volver√© m√°s fuerte desde las profundidades!",
      "¬°Hell... me las pagar√° con creces!",
      "¬°No me olvidar√© de esto jam√°s!",
      "¬°Mi venganza ser√° eterna y sombr√≠a!",
      "¬°Las sombras me proteger√°n hasta mi regreso!",
      "¬°Pronto me regenerar√© en el abismo!",
      "¬°Hell no ha visto lo √∫ltimo de m√≠!",
      "¬°Scythe Society... nos veremos de nuevo!",
      "¬°La oscuridad nunca puede ser derrotada!",
      "¬°Desde el inframundo planear√© mi venganza!",
      "¬°Red ser√° el primero en caer cuando regrese!",
      "¬°Imposible... ¬øc√≥mo pueden ser tan fuertes?!",
      "¬°Hell... te subestim√© una vez m√°s...!",
      "¬°Malditos sean todos ustedes!",
    ],

    fase_summoning: [
      "¬°Mis esbirros har√°n el trabajo sucio!",
      "¬°Legiones del abismo, vengan a m√≠!",
      "¬°No estoy solo en esta batalla!",
      "¬°Hell enfrentar√° a todo mi ej√©rcito!",
      "¬°Cada enemigo que invoco es su pesadilla!",
    ],

    fase_mines: [
      "¬°Esquiven esto si pueden!",
      "¬°El suelo bajo sus pies es traicionero!",
      "¬°Cada paso podr√≠a ser el √∫ltimo!",
      "¬°Las minas conocen su ubicaci√≥n!",
      "¬°Hell aprender√° a temer el suelo!",
    ],

    fase_bullets: [
      "¬°Lluvia de muerte del inframundo!",
      "¬°Esquiven mi ballet mortal!",
      "¬°Cada bala tiene su nombre grabado!",
      "¬°Hell danzar√° con la muerte!",
      "¬°Mis patrones son arte letal!",
    ],

    fase_redline: [
      "¬°Sigue mi rastro mortal!",
      "¬°El hilo rojo marca su destino!",
      "¬°Mi ruta es su perdici√≥n!",
      "¬°Cada movimiento m√≠o es calculado!",
      "¬°Hell no podr√° predecir mi camino!",
    ],

    fase_yankenpo: [
      "¬°√öltima oportunidad, mortal!",
      "¬°El destino se decide aqu√≠!",
      "¬°Yan Ken Po determinar√° el ganador!",
      "¬°Hell vs las fuerzas del mal!",
      "¬°Que gane el mejor estratega!",
    ],

    dano_alto: [
      "¬°Impossible! ¬øC√≥mo me hieren?",
      "¬°No puede ser! ¬°Soy invencible!",
      "¬°Mi poder se desvanece!",
      "¬°Esto no deber√≠a pasar!",
      "¬°Malditos mortales!",
      "¬°No me derrotar√°n tan f√°cil!",
      "¬°Hell tiene m√°s fuerza de la que pens√©!",
      "¬°Cada herida me hace m√°s peligroso!",
      "¬°Su determinaci√≥n es... admirable!",
      "¬°Pero a√∫n no han visto mi poder real!",
    ],

    dano_bajo: [
      "¬°Eso apenas me ha rozado!",
      "¬°¬øEs eso todo lo que tienen?!",
      "¬°Hell deber√≠a intentar m√°s fuerte!",
      "¬°Mi armadura de sombras me protege!",
      "¬°Necesitar√°n m√°s que eso!",
    ],

    inmunidad: [
      "¬°Soy intocable ahora!",
      "¬°Sus ataques no me afectan!",
      "¬°Hell desperdicia munici√≥n!",
      "¬°Mi escudo de oscuridad es perfecto!",
      "¬°Observen mi poder absoluto!",
    ],

    teletransporte: [
      "¬°No pueden atraparme!",
      "¬°La sombra es mi aliada!",
      "¬°Hell no sabe d√≥nde golpear!",
      "¬°Soy uno con las tinieblas!",
      "¬°Aparezco donde menos lo esperan!",
    ],

    vida_critica: [
      "¬°No... esto no puede estar pasando!",
      "¬°Mi poder se desvanece!",
      "¬°Hell... han llegado demasiado lejos!",
      "¬°Pero a√∫n no he usado todo mi poder!",
      "¬°La desesperaci√≥n me hace m√°s fuerte!",
      "¬°Si caigo, me llevar√© todo conmigo!",
    ],
  },

  // ======================================================
  // INICIALIZACI√ìN
  // ======================================================

  /**
   * Inicializar el sistema de comentarios
   */
  init(bossManagerRef) {
    this.bossManager = bossManagerRef;
    this.initCommentSystem();
    console.log("üí¨ Sistema de comentarios del boss inicializado");
  },

  /**
   * Configurar sistema de comentarios
   */
  initCommentSystem() {
    this.lastCommentTime = 0;
    this.activeComments = [];
  },

  // ======================================================
  // ACTUALIZACI√ìN PRINCIPAL
  // ======================================================

  /**
   * Actualizar sistema de comentarios
   */
  update() {
    if (!this.bossManager.active) return;

    // Actualizar comentarios activos
    this.updateActiveComments();

    // üî• ACTUALIZAR POSICI√ìN DEL MENSAJE DEL BOSS
    this.updateBossMessagePosition();

    // Comentarios autom√°ticos durante combate
    this.updateAutomaticComments();
  },

  /**
   * üî• CORREGIDA: Actualiza la posici√≥n del mensaje para que siga al boss fluidamente
   */
  updateBossMessagePosition() {
    const bossMessage = document.getElementById("boss-speech-bubble");
    if (bossMessage && this.bossManager.boss) {
      const boss = this.bossManager.boss;
      const canvas = window.getCanvas();

      if (canvas) {
        // Posici√≥n relativa al canvas
        const rect = canvas.getBoundingClientRect();
        const bossScreenX = rect.left + boss.x + boss.width / 2;
        const bossScreenY = rect.top + boss.y - 80; // 80px arriba del boss

        // Actualizar posici√≥n suavemente
        bossMessage.style.left = `${bossScreenX}px`;
        bossMessage.style.top = `${bossScreenY}px`;
        bossMessage.style.transform = "translateX(-50%)";
        bossMessage.style.transition = "left 0.1s ease, top 0.1s ease";
      }
    }
  },

  /**
   * Actualizar comentarios activos
   */
  updateActiveComments() {
    const currentTime = Date.now();

    for (let i = this.activeComments.length - 1; i >= 0; i--) {
      const comment = this.activeComments[i];
      const elapsed = currentTime - comment.startTime;

      // Verificar si debe empezar a desvanecer
      if (elapsed > comment.duration - this.commentConfig.fadeDuration) {
        const fadeProgress =
          (elapsed - (comment.duration - this.commentConfig.fadeDuration)) /
          this.commentConfig.fadeDuration;
        comment.element.style.opacity = Math.max(0, 1 - fadeProgress);
        comment.element.style.transform =
          comment.baseTransform + ` translateY(-${fadeProgress * 10}px)`;
      }

      // Eliminar comentario expirado
      if (elapsed > comment.duration) {
        this.removeComment(i);
      }
    }
  },

  /**
   * Comentarios autom√°ticos durante el combate
   */
  updateAutomaticComments() {
    const currentTime = window.getGameTime();

    // Comentarios aleatorios cada cierto tiempo
    if (currentTime - this.lastCommentTime > 600) {
      // Cada 10 segundos
      if (Math.random() < 0.3) {
        // 30% de probabilidad
        this.sayRandomComment("combate");
      }
    }
  },

  // ======================================================
  // SISTEMA PRINCIPAL DE COMENTARIOS
  // ======================================================

  /**
   * Decir comentario aleatorio de una categor√≠a
   */
  sayRandomComment(situation) {
    const currentTime = window.getGameTime();
    const cooldown = this.commentCooldowns[situation] || 180;

    // Verificar cooldown
    if (
      currentTime - this.lastCommentTime < cooldown &&
      situation !== "derrota_boss"
    ) {
      return;
    }

    const comments = this.commentDatabase[situation];
    if (!comments || comments.length === 0) {
      console.warn(`üí¨ No hay comentarios para la situaci√≥n: ${situation}`);
      return;
    }

    const randomComment = comments[Math.floor(Math.random() * comments.length)];
    this.showBossMessage(randomComment, situation);

    this.lastCommentTime = currentTime;
    console.log(`üëπ Boss dice (${situation}): ${randomComment}`);
  },

  /**
   * Decir comentario espec√≠fico
   */
  sayComment(text, situation = "custom") {
    this.showBossMessage(text, situation);
    console.log(`üëπ Boss dice: ${text}`);
  },

  /**
   * Mostrar mensaje del boss con estilo √©pico
   */
  /**
   * Mostrar mensaje del boss con estilo √©pico
   */
  showBossMessage(message, category = "combate") {
    // üî• ELIMINAR MENSAJE ANTERIOR SI EXISTE
    const existingMessage = document.getElementById("boss-speech-bubble");
    if (existingMessage) {
      existingMessage.remove();
    }

    const messageElement = this.createMessageElement(message, category);

    // üî• POSICIONAR RELATIVO AL BOSS
    if (this.bossManager.boss) {
      const boss = this.bossManager.boss;
      messageElement.style.left = `${boss.x + boss.width / 2}px`;
      messageElement.style.top = `${boss.y - 100}px`;
      messageElement.style.transform = "translateX(-50%)";
    } else {
      this.positionMessage(messageElement, category);
    }

    // üî• ASIGNAR ID √öNICO
    messageElement.id = "boss-speech-bubble";

    document.body.appendChild(messageElement);

    // Animaci√≥n de entrada
    this.animateMessageEntrance(messageElement);

    // Registrar comentario activo
    const commentObj = {
      element: messageElement,
      startTime: Date.now(),
      duration: this.getDuration(category),
      message: message,
      category: category,
      baseTransform: messageElement.style.transform,
    };

    this.activeComments.push(commentObj);
  },

  /**
   * Crear elemento de mensaje
   */
  createMessageElement(message, category) {
    const messageElement = document.createElement("div");
    messageElement.className = "boss-comment";

    const styles = this.getMessageStyles(category);
    messageElement.style.cssText = styles;
    messageElement.innerHTML = this.formatMessage(message, category);

    return messageElement;
  },

  /**
   * Obtener estilos seg√∫n categor√≠a
   */
  getMessageStyles(category) {
    const baseStyles = `
      position: fixed;
      z-index: 1999;
      font-family: Arial, cursive;
      font-weight: bold;
      text-align: center;
      padding: 8px 12px;
      border-radius: 12px;
      max-width: ${this.commentConfig.maxWidth};
      word-wrap: break-word;
      pointer-events: none;
      transition: all 0.3s ease;
      backdrop-filter: blur(5px);
      border: 2px solid;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.8);
    `;

    // Estilos espec√≠ficos por categor√≠a
    const categoryStyles = {
      entrada: `
        background: linear-gradient(135deg, rgba(139, 0, 0, 0.95), rgba(0, 0, 0, 0.95));
        color: #FF0000;
        border-color: #FF0000;
        font-size: 16px;
        text-shadow: 
          -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000,
          0 0 10px #FF0000, 0 0 20px #FF0000;
      `,

      combate: `
        background: rgba(0, 0, 0, 0.9);
        color: #FF4444;
        border-color: #FF4444;
        font-size: ${this.commentConfig.fontSize};
        text-shadow: 
          -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000,
          0 0 5px #FF4444;
      `,

      derrota_boss: `
        background: linear-gradient(135deg, rgba(139, 0, 0, 0.95), rgba(255, 0, 0, 0.95));
        color: #FFFFFF;
        border-color: #FF0000;
        font-size: 18px;
        text-shadow: 
          -2px -2px 0 #000, 2px -2px 0 #000, -2px 2px 0 #000, 2px 2px 0 #000,
          0 0 15px #FF0000, 0 0 30px #FF0000;
      `,

      vida_critica: `
        background: rgba(255, 0, 0, 0.9);
        color: #FFFFFF;
        border-color: #FFFFFF;
        font-size: 15px;
        text-shadow: 
          -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000,
          0 0 10px #FFFFFF;
        animation: pulse 1s infinite;
      `,

      fase: `
        background: linear-gradient(135deg, rgba(75, 0, 130, 0.95), rgba(139, 0, 139, 0.95));
        color: #FFD700;
        border-color: #FFD700;
        font-size: 15px;
        text-shadow: 
          -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000,
          0 0 8px #FFD700;
      `,

      default: `
        background: rgba(0, 0, 0, 0.8);
        color: #FFFFFF;
        border-color: #FFFFFF;
        font-size: ${this.commentConfig.fontSize};
        text-shadow: 
          -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
      `,
    };

    return baseStyles + (categoryStyles[category] || categoryStyles.default);
  },

  /**
   * Formatear mensaje seg√∫n categor√≠a
   */
  formatMessage(message, category) {
    const prefixes = {
      entrada: "üëπ",
      combate: "üëπ",
      derrota_boss: "üíÄ",
      vida_critica: "‚ö†Ô∏è",
      fase: "üî•",
      default: "üëπ",
    };

    const prefix = prefixes[category] || prefixes.default;
    return `${prefix} "${message}" ${prefix}`;
  },

  /**
   * Posicionar mensaje seg√∫n configuraci√≥n
   */
  positionMessage(element, category) {
    const boss = this.bossManager.boss;

    switch (this.commentConfig.position) {
      case "above_boss":
        if (boss) {
          const bossX = boss.x + boss.width / 2;
          const bossY = boss.y - 80;

          element.style.left = `${bossX}px`;
          element.style.top = `${bossY}px`;
          element.style.transform = "translateX(-50%)";
        } else {
          // Fallback si no hay boss
          element.style.top = "20%";
          element.style.left = "50%";
          element.style.transform = "translateX(-50%)";
        }
        break;

      case "screen_top":
        element.style.top = "15%";
        element.style.left = "50%";
        element.style.transform = "translateX(-50%)";
        break;

      case "floating":
        const offsetIndex = this.activeComments.length;
        element.style.top = `${20 + offsetIndex * 15}%`;
        element.style.left = "50%";
        element.style.transform = "translateX(-50%)";
        break;

      default:
        element.style.top = "20%";
        element.style.left = "50%";
        element.style.transform = "translateX(-50%)";
    }
  },

  /**
   * Animar entrada del mensaje
   */
  animateMessageEntrance(element) {
    element.style.opacity = "0";
    element.style.transform += " scale(0.8) translateY(-10px)";

    setTimeout(() => {
      element.style.opacity = "1";
      element.style.transform = element.style.transform
        .replace("scale(0.8)", "scale(1)")
        .replace("translateY(-10px)", "translateY(0)");
    }, 50);
  },

  /**
   * Obtener duraci√≥n seg√∫n categor√≠a
   */
  getDuration(category) {
    const durations = {
      entrada: 6000, // 6 segundos
      combate: 4000, // 4 segundos
      derrota_boss: 8000, // 8 segundos
      vida_critica: 5000, // 5 segundos
      fase: 4000, // 4 segundos
      default: 4000,
    };

    return durations[category] || durations.default;
  },

  /**
   * Eliminar comentario
   */
  removeComment(index) {
    if (index >= 0 && index < this.activeComments.length) {
      const comment = this.activeComments[index];

      if (comment.element.parentNode) {
        comment.element.parentNode.removeChild(comment.element);
      }

      this.activeComments.splice(index, 1);
    }
  },

  // ======================================================
  // REACCIONES A EVENTOS
  // ======================================================

  /**
   * Reaccionar al recibir da√±o
   */
  onDamageReceived(healthPercentage) {
    // Comentarios seg√∫n el da√±o recibido
    if (Math.random() < 0.15) {
      // 15% probabilidad
      if (healthPercentage > 0.5) {
        this.sayRandomComment("dano_bajo");
      } else if (healthPercentage > 0.2) {
        this.sayRandomComment("dano_alto");
      } else {
        this.sayRandomComment("vida_critica");
      }
    }
  },

  /**
   * Reaccionar a cambio de fase
   */
  onPhaseChange(newPhase) {
    const phaseKey = `fase_${newPhase.toLowerCase()}`;

    if (this.commentDatabase[phaseKey]) {
      this.sayRandomComment(phaseKey);
    } else {
      // Comentario gen√©rico de fase
      this.sayComment(`¬°Hora de la fase ${newPhase}!`, "fase");
    }
  },

  /**
   * Reaccionar a inmunidad
   */
  onImmunityActivated() {
    if (Math.random() < 0.4) {
      // 40% probabilidad
      this.sayRandomComment("inmunidad");
    }
  },

  /**
   * Reaccionar a teletransporte
   */
  onTeleport() {
    if (Math.random() < 0.3) {
      // 30% probabilidad
      this.sayRandomComment("teletransporte");
    }
  },

  // ======================================================
  // UTILIDADES
  // ======================================================

  /**
   * Configurar sistema de comentarios
   */
  configure(config) {
    this.commentConfig = { ...this.commentConfig, ...config };
  },

  /**
   * Agregar comentarios personalizados
   */
  addCustomComments(category, comments) {
    if (!this.commentDatabase[category]) {
      this.commentDatabase[category] = [];
    }

    this.commentDatabase[category].push(...comments);
    console.log(
      `üí¨ Agregados ${comments.length} comentarios a categor√≠a: ${category}`
    );
  },

  /**
   * Limpiar comentarios activos
   */
  clearActiveComments() {
    this.activeComments.forEach((comment, index) => {
      this.removeComment(index);
    });
    this.activeComments = [];
  },

  /**
   * Forzar comentario inmediato (ignora cooldowns)
   */
  forceComment(text, category = "custom") {
    const oldCooldown = this.lastCommentTime;
    this.lastCommentTime = 0; // Reset cooldown temporalmente

    this.sayComment(text, category);

    this.lastCommentTime = oldCooldown;
  },

  // ======================================================
  // CLEANUP Y RESET
  // ======================================================

  /**
   * Limpiar sistema de comentarios
   */
  cleanup() {
    console.log("üßπ Limpiando sistema de comentarios");

    // Eliminar todos los comentarios activos
    this.clearActiveComments();

    // Reset timers
    this.lastCommentTime = 0;
  },

  /**
   * Reset del sistema
   */
  reset() {
    this.cleanup();
    this.initCommentSystem();
    console.log("üîÑ Sistema de comentarios reseteado");
  },

  // ======================================================
  // GETTERS Y ESTAD√çSTICAS
  // ======================================================

  getActiveCommentCount() {
    return this.activeComments.length;
  },

  getCommentDatabase() {
    return this.commentDatabase;
  },

  getCategoryCount(category) {
    return this.commentDatabase[category]
      ? this.commentDatabase[category].length
      : 0;
  },

  /**
   * Obtener estad√≠sticas del sistema
   */
  getStats() {
    const stats = {
      activeComments: this.activeComments.length,
      maxActiveComments: this.maxActiveComments,
      totalCategories: Object.keys(this.commentDatabase).length,
      totalComments: 0,
      lastCommentTime: this.lastCommentTime,
    };

    // Contar total de comentarios
    Object.values(this.commentDatabase).forEach((comments) => {
      stats.totalComments += comments.length;
    });

    return stats;
  },

  /**
   * Obtener comentarios por categor√≠a
   */
  getCategoryStats() {
    const categoryStats = {};

    Object.keys(this.commentDatabase).forEach((category) => {
      categoryStats[category] = {
        count: this.commentDatabase[category].length,
        cooldown: this.commentCooldowns[category] || 180,
      };
    });

    return categoryStats;
  },
};

// Hacer disponible globalmente
window.BossComments = BossComments;

console.log(
  "üí¨ boss-comments.js cargado - Sistema de comentarios √©picos listo"
);
